/*
 * TrainSetLoader.cpp
 *
 *  Created on: Jan 4, 2013
 *      Author: chunwei
 */

#include "pretreator/TrainSetLoader.h"

namespace redog {

TrainSetLoader::TrainSetLoader(string listpath) {
	// TODO Auto-generated constructor stub
	this->listpath = listpath;
	this->filenum = 0;
}


bool TrainSetLoader::load(char *ph = "/home/chunwei/NetFlixData/training_set") {
    // load path list file
	ifstream trainpaths(this->listpath);
	if (!trainpaths.is_open()) { cout<<".. can't open train paths list file!"<<endl; return false;}
	char strtem[256];
	while(trainpaths.getline(strtem, 256)){
		//get a path, open the path and start to parse
        if(!this->parse(strtem)) return false;
	}
    trainpaths.close();
    return true;
}

bool TrainSetLoader::parse(char *path){
    ifstream file(path);
    int itemid;

	if (!file.is_open()) { cout<<".. can't open "<<path<<endl; return false;}
    //parse content
    char strtem[256];
    while(file.getline(strtem, 256)){
    	string line(strtem);
    	int pos = line.find(":");
    	//find :
    	if(-1 != pos){
    		itemid = atoi(line.substr(0, pos).c_str());
    		assert(itemid != 0);
    		++ this->filenum;
    		if(this->filenum % 2000){cout<<".. parsed "<<this->filenum<<" files!"<<endl;}
    		// to following record lines
    		continue;
    	}
    	// parse record line
    	vector<string> parts = this->_split(line, ',');
    	int userid = atoi(parts[0].c_str());
    	short record = atoi(parts[1].c_str());
    	assert(userid > 0 && userid <= 2649429);
    	// create new record and push
    	TrainRecord r;
    	r = {userid, itemid, record};
    	this->datas.push_back(r);
    }
    file.close();
    return true;

}


void TrainSetLoader::_sort(){
	cout<<".. begin sort"<<endl;
	sort(this->datas.begin()+sizeof(TrainRecord), this->datas.end(), this->_compare);
	cout<<".. end sort"<<endl;
}

bool TrainSetLoader::tofile(char *path ="/home/chunwei/NetFlixData/trainset_datas.red" ){
	//first sort then write to binary file
	this->_sort();
	cout<<".. begin to write data to file : "<<path<<endl;
	ofstream file;
	file.open(path, ios::out|ios::binary);
	if(! file.is_open()){cout<<".. can't open file: "<<path<<endl; return false;}
	if(! this->datas.empty()){
		//需要对地址转化
		file.write(reinterpret_cast<char *>(this->datas.begin()), this->datas.size()* sizeof(TrainRecord));
	}
	file.close();
	cout<<".. succeed write file"<<endl;
	return true;
}

vector<string> &TrainSetLoader::_split(const std::string &s, char delim){
    vector<string> elems;
    stringstream ss(s);
    string item;
    while(getline(ss, item, delim)) {
        elems.push_back(item);
    }
    return elems;
}

bool TrainSetLoader::_compare(TrainRecord &a, TrainRecord &b) {
    if (a.userid == b.userid){
    	return a.itemid < b.itemid;
    }
    return a.userid < b.userid;
}


} /* namespace redog */
